AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: "This template deploys the AWS SQS queue to trigger the serverless forwarder, Bootstrap Lambda to upload config file"
Parameters:
    ElasticCloudID:
      Type: String
      Description: Cloud ID of Elastic Cluster Deployment
      NoEcho: true

    ElasticAPIKey:
      Type: String
      Description: RESTful API to provide access to deployment CRUD actions
      NoEcho: true
      
    AWSOrganizationID:
      Type: String
      Description: >
        The ID of your AWS Organization.
        Example: o-0123456789abcdef0 
      
    BootstrapLambdaConfigBucket:
      Type: String
      Description: The S3 bucket name where the Bootstrap Lambda configuration zip file is stored.

    BootstrapLambdaConfigFilePath:
      Type: String
      Description: > 
        The path in the S3 bucket where the Lambda configuration zip file is located.
        Example: BootstrapLambdaCode/ElasticBootstrapLambdaLogArchiveAccount.zip (If you have stored the zip file in a folder named BootstrapLambdaCode)
      
    CloudTrailBucketName:
      Type: String
      Description: >
        Name of the AWS Control Tower created CloudTrail S3 bucket present in Log Archive Account
        Example: aws-controltower-logs-123456789123-us-east-1
        
    CloudTrailBucketARN:
      Type: String
      Description: >
        ARN of the AWS Control Tower created CloudTrail S3 bucket present in Log Archive Account
        Example: arn:aws:s3:::aws-controltower-logs-123456789123-us-east-1
        
    DeployInVPC:
      Type: String
      Description: >
        'Do you want to deploy the Elastic Serverless Forwarder in a VPC? (Enter "yes" or "no").
        Note: A VPC must have already been created in the region before deploying this template.' 
      Default: 'No'
      AllowedValues: ['Yes', 'No']

    VPCId:
      Type: String
      Description: 'Enter the VPC ID in which you want to deploy the Elastic Serverless Forwarder'

    SubnetIds:
      Type: CommaDelimitedList
      Description: 'Enter the Subnet IDs (comma-separated) for the Elastic Serverless Forwarder'
      ConstraintDescription: 'Please enter a valid list of Subnet IDs.'
      
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: S3 CloudTrail bucket Details of Log Archive Account 
      Parameters:
      - CloudTrailBucketName
      - CloudTrailBucketARN
    - Label:
        default: Elastic Cluster Deployment Details
      Parameters:
      - ElasticCloudID
      - ElasticAPIKey
    - Label:
        default: Elastic Bootstrap Lambda ZIP File Details
      Parameters:
      - BootstrapLambdaConfigBucket
      - BootstrapLambdaConfigFilePath
    - Label:
        default: AWS Organization ID
      Parameters:
      - AWSOrganizationID
    - Label:
        default: Deploy Elastic Forwarder in a VPC (Optional)
      Parameters:
      - DeployInVPC
      - VPCId
      - SubnetIds
    ParameterLabels:
      ElasticCloudID:
        default: Elastic Cloud ID
      ElasticAPIKey:
        default: Elastic API Key
      CloudTrailBucketName:
        default: CloudTrail Bucket Name
      CloudTrailBucketARN:
        default: CloudTrail Bucket ARN
      BootstrapLambdaConfigBucket:
        default: Bootstrap Lambda Config Bucket
      BootstrapLambdaConfigFilePath:
        default: Bootstrap Lambda Config File Path
      AWSOrganizationID:
        default: AWS Organization ID
      DeployInVPC:
        default: Deploy Serverless Forwarder In VPC
      VPCId:
        default: VPC ID
      SubnetIds:
        default: Subnet IDs
        
Conditions:
  ShouldDeployElasticForwarderInVPC: !Equals [!Ref DeployInVPC, "Yes"]
        
Mappings:
  VPCServiceName:
    af-south-1: 
      service: com.amazonaws.vpce.us-east-1.vpce-svc-0e42e1e06ed010238
    ap-east-1:
      service: com.amazonaws.vpce.ap-east-1.vpce-svc-0f96fbfaf55558d5c
    ap-northeast-1:
      service: com.amazonaws.vpce.ap-northeast-1.vpce-svc-0e1046d7b48d5cf5f
    ap-northeast-2:
      service: com.amazonaws.vpce.ap-northeast-2.vpce-svc-0d90cf62dae682b84
    ap-south-1:
      service: com.amazonaws.vpce.ap-south-1.vpce-svc-0e9c1ae5caa269d1b
    ap-southeast-1:
      service: com.amazonaws.vpce.ap-southeast-1.vpce-svc-0cbc6cb9bdb683a95
    ap-southeast-2:
      service: com.amazonaws.vpce.ap-southeast-2.vpce-svc-0cde7432c1436ef13
    ca-central-1:
      service: com.amazonaws.vpce.ca-central-1.vpce-svc-0d3e69dd6dd336c28
    eu-central-1:
      service: com.amazonaws.vpce.eu-central-1.vpce-svc-081b2960e915a0861
    eu-south-1:
      service: com.amazonaws.vpce.eu-south-1.vpce-svc-03d8fc8a66a755237
    eu-north-1:
      service: com.amazonaws.vpce.eu-north-1.vpce-svc-05915fc851f802294
    eu-west-1:
      service: com.amazonaws.vpce.eu-west-1.vpce-svc-01f2afe87944eb12b
    eu-west-2:
      service: com.amazonaws.vpce.eu-west-2.vpce-svc-0e42a2c194c97a1d0
    eu-west-3:
      service: com.amazonaws.vpce.eu-west-3.vpce-svc-0d6912d10db9693d1
    me-south-1:
      service: com.amazonaws.vpce.me-south-1.vpce-svc-0381de3eb670dcb48
    sa-east-1:
      service: com.amazonaws.vpce.sa-east-1.vpce-svc-0b2dbce7e04dae763
    us-east-1: 
      service: com.amazonaws.vpce.us-east-1.vpce-svc-0e42e1e06ed010238
    us-east-2:
      service: com.amazonaws.vpce.us-east-2.vpce-svc-02d187d2849ffb478
    us-west-1:
      service: com.amazonaws.vpce.us-west-1.vpce-svc-00def4a16a26cb1b4
    us-west-2:
      service: com.amazonaws.vpce.us-west-2.vpce-svc-0e69febae1fb91870
  PrivateHostedZoneDNSName:
    af-south-1:
      HostedZone: vpce.af-south-1.aws.elastic-cloud.com
    ap-east-1:
      HostedZone: vpce.ap-east-1.aws.elastic-cloud.com
    ap-northeast-1:
      HostedZone: vpce.ap-northeast-1.aws.elastic-cloud.com
    ap-northeast-2:
      HostedZone: vpce.ap-northeast-2.aws.elastic-cloud.com
    ap-south-1:
      HostedZone: vpce.ap-south-1.aws.elastic-cloud.com
    ap-southeast-1:
      HostedZone: vpce.ap-southeast-1.aws.elastic-cloud.com
    ap-southeast-2:
      HostedZone: vpce.ap-southeast-2.aws.elastic-cloud.com
    ca-central-1:
      HostedZone: vpce.ca-central-1.aws.elastic-cloud.com
    eu-central-1:
      HostedZone: vpce.eu-central-1.aws.elastic-cloud.com
    eu-south-1:
      HostedZone: vpce.eu-south-1.aws.elastic-cloud.com
    eu-north-1:
      HostedZone: vpce.eu-north-1.aws.elastic-cloud.com
    eu-west-1:
      HostedZone: vpce.eu-west-1.aws.elastic-cloud.com
    eu-west-2:
      HostedZone: vpce.eu-west-2.aws.elastic-cloud.com
    eu-west-3:
      HostedZone: vpce.eu-west-3.aws.elastic-cloud.com
    me-south-1:
      HostedZone: vpce.me-south-1.aws.elastic-cloud.com
    sa-east-1:
      HostedZone: vpce.sa-east-1.aws.elastic-cloud.com
    us-east-1: 
      HostedZone: vpce.us-east-1.aws.elastic-cloud.com
    us-east-2:
      HostedZone: vpce.us-east-2.aws.elastic-cloud.com
    us-west-1:
      HostedZone: vpce.us-west-1.aws.elastic-cloud.com
    us-west-2:
      HostedZone: vpce.us-west-2.aws.elastic-cloud.com
      
Resources:
  ElasticSecret:
    Type: AWS::SecretsManager::Secret
    DependsOn: ElasticSSMSecretEncryptionKey
    Properties:
      Name: !Sub "ElasticCloudSecret-${AWS::StackName}"
      KmsKeyId: !Ref ElasticSSMSecretEncryptionKey
      SecretString: !Sub |
        {
          "ElasticCloudID": "${ElasticCloudID}",
          "APIKey": "${ElasticAPIKey}"
        }
        
  ElasticCloudTrailSQS:       #Queue for Elastic Load Balancer logs bucket
    Type: AWS::SQS::Queue
    Properties:
      QueueName: Elastic-SQS-CloudTrail-Config
      VisibilityTimeout: 910
      KmsMasterKeyId: !Ref ElasticSQSKMSKey
      KmsDataKeyReusePeriodSeconds: 1800
      
  ElasticCloudTrailSQSPolicy:     #Queue policy for ElbSQS queue
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref ElasticCloudTrailSQS
      PolicyDocument:
        Version: 2012-10-17
        Id: s3-forwarding
        Statement:
          - Sid: S3 forwarding
            Effect: Allow
            Principal:
              AWS: '*'
            Action: 
              - 'sqs:SendMessage'
            Resource: !GetAtt ElasticCloudTrailSQS.Arn
            Condition:
              ArnLike:
                aws:SourceArn: 
                  - !Ref CloudTrailBucketARN

  ElbSQS:       #Queue for Elastic Load Balancer logs bucket
    Type: AWS::SQS::Queue
    Properties:
      QueueName: Elastic-SQS-ElbLogs
      VisibilityTimeout: 910
      KmsMasterKeyId: !Ref ElasticSQSKMSKey
      KmsDataKeyReusePeriodSeconds: 1800
      
  ElbSQSPolicy:     #Queue policy for ElbSQS queue
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref ElbSQS
      PolicyDocument:
        Version: 2012-10-17
        Id: s3-forwarding
        Statement:
          - Sid: S3 forwarding
            Effect: Allow
            Principal:
              AWS: '*'
            Action: 
              - 'sqs:SendMessage'
            Resource: !GetAtt ElbSQS.Arn
            Condition:
              ArnLike:
                aws:SourceArn: 
                  - !Sub "arn:aws:s3:::elastic-central-elb-access-logs-${AWS::AccountId}-${AWS::Region}"
                  
  ElasticS3SQS:        #Queue for S3 access log bucket
    Type: AWS::SQS::Queue
    Properties:
      QueueName: Elastic-SQS-S3Logs
      VisibilityTimeout: 910
      KmsMasterKeyId: !Ref ElasticSQSKMSKey
      KmsDataKeyReusePeriodSeconds: 1800
  
  ElasticS3SQSPolicy:      #Queue policy for S3SQS queue
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref ElasticS3SQS
      PolicyDocument:
        Version: 2012-10-17
        Id: s3-forwarding
        Statement:
          - Sid: S3 forwarding
            Effect: Allow
            Principal:
              AWS: '*'
            Action: 
              - 'sqs:SendMessage'
            Resource: !GetAtt ElasticS3SQS.Arn
            Condition:
              ArnLike:
                aws:SourceArn: 
                  - !Sub "arn:aws:s3:::elastic-central-s3-access-logs-${AWS::AccountId}-${AWS::Region}"
                  
  VPCFlowLogsElasticSQS:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: Elastic-SQS-VPCFlowLogs
      VisibilityTimeout: 910
      KmsMasterKeyId: !Ref ElasticSQSKMSKey
      KmsDataKeyReusePeriodSeconds: 1800

  VPCFlowLogsElasticSQSPolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref VPCFlowLogsElasticSQS
      PolicyDocument:
        Version: 2012-10-17
        Id: VPCFlowLogs-forwarding
        Statement:
          - Sid: VPCFlowLogs forwarding
            Effect: Allow
            Principal:
              AWS: '*'
            Action: 
              - 'sqs:SendMessage'
            Resource: !GetAtt VPCFlowLogsElasticSQS.Arn
            Condition:
              ArnLike:
                aws:SourceArn: 
                  - !Sub "arn:aws:s3:::elastic-central-vpcflow-logging-${AWS::AccountId}-${AWS::Region}"
                
  S3AccessLoggingBucket:        #Central S3 access log collection bucket
    DeletionPolicy: Retain
    DependsOn: ElasticS3SQSPolicy
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub elastic-central-s3-access-logs-${AWS::AccountId}-${AWS::Region}
      VersioningConfiguration:
        Status: Enabled
      NotificationConfiguration:
        QueueConfigurations:
          - Event: s3:ObjectCreated:*
            Queue: !GetAtt ElasticS3SQS.Arn
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
              
  S3AccessLoggingBucketPolicy:
    Type: AWS::S3::BucketPolicy
    DependsOn: S3AccessLoggingBucket
    Properties:
      Bucket: !Ref S3AccessLoggingBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: Replication
            Effect: Allow
            Principal:
              AWS: "*"
            Action:
              - s3:ListBucket
              - s3:GetObject
              - s3:ReplicateObject
              - s3:ReplicateDelete
              - s3:ReplicateTags
              - s3:PutBucketVersioning
              - s3:GetBucketVersioning
              - s3:ObjectOwnerOverrideToBucketOwner
              - s3:GetBucketAcl
              - s3:PutObject
            Resource:
              - !Sub "arn:aws:s3:::${S3AccessLoggingBucket}/*"
              - !Sub "arn:aws:s3:::${S3AccessLoggingBucket}"
            Condition:
              StringEquals:
                aws:PrincipalOrgID:
                  - !Ref AWSOrganizationID
  
  VPCFlowLoggingBucket:     #Central VPC flow log collection bucket
    Type: AWS::S3::Bucket
    DependsOn: S3AccessLoggingBucket
    Properties:
      BucketName: !Sub elastic-central-vpcflow-logging-${AWS::AccountId}-${AWS::Region}
      VersioningConfiguration:
        Status: Enabled
      NotificationConfiguration:
        QueueConfigurations:
          - Event: s3:ObjectCreated:*
            Queue: !GetAtt VPCFlowLogsElasticSQS.Arn
      LoggingConfiguration:
        DestinationBucketName: !Sub elastic-central-s3-access-logs-${AWS::AccountId}-${AWS::Region}
        LogFilePrefix: !Sub "elastic-central-s3-access-logs-${AWS::AccountId}-${AWS::Region}/"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - ExpirationInDays: 90
            Status: Enabled

  VPCFlowLogsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref VPCFlowLoggingBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: bucketpolicy
            Effect: Allow
            Principal:
              AWS: "*"
            Action:
              - s3:ListBucket
              - s3:GetObject
              - s3:ReplicateObject
              - s3:ReplicateDelete
              - s3:ReplicateTags
              - s3:PutBucketVersioning
              - s3:GetBucketVersioning
              - s3:ObjectOwnerOverrideToBucketOwner
              - s3:GetBucketAcl
              - s3:PutObject
            Resource:
              - !Sub "arn:aws:s3:::${VPCFlowLoggingBucket}/*"
              - !Sub "arn:aws:s3:::${VPCFlowLoggingBucket}"
            Condition:
              StringEquals:
                aws:PrincipalOrgID:
                  - !Ref AWSOrganizationID
                  
  ElbCentralLoggingBucket:
    DeletionPolicy: Retain
    DependsOn: 
      - ElbSQSPolicy
      - S3AccessLoggingBucket
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub elastic-central-elb-access-logs-${AWS::AccountId}-${AWS::Region}
      VersioningConfiguration:
        Status: Enabled
      NotificationConfiguration:
        QueueConfigurations:
          - Event: s3:ObjectCreated:*
            Queue: !GetAtt ElbSQS.Arn
      LoggingConfiguration:
        DestinationBucketName: !Sub elastic-central-s3-access-logs-${AWS::AccountId}-${AWS::Region}
        LogFilePrefix: !Sub "elastic-central-s3-access-logs-${AWS::AccountId}-${AWS::Region}/"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - ExpirationInDays: 90
            Status: Enabled

  ElbBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ElbCentralLoggingBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: Replication
            Effect: Allow
            Principal:
              AWS: "*"
            Action:
              - s3:ListBucket
              - s3:GetObject
              - s3:ReplicateObject
              - s3:ReplicateDelete
              - s3:ReplicateTags
              - s3:PutBucketVersioning
              - s3:GetBucketVersioning
              - s3:ObjectOwnerOverrideToBucketOwner
              - s3:GetBucketAcl
              - s3:PutObject
            Resource:
              - !Sub "arn:aws:s3:::${ElbCentralLoggingBucket}/*"
              - !Sub "arn:aws:s3:::${ElbCentralLoggingBucket}"
            Condition:
              StringEquals:
                aws:PrincipalOrgID:
                  - !Ref AWSOrganizationID

  ElasticServerlessForwarderEventMacro:
    Type: AWS::Serverless::Application
    Properties:
      Location:
        ApplicationId: arn:aws:serverlessrepo:eu-central-1:267093732750:applications/helper-macro-elastic-serverless-forwarder
        SemanticVersion: 1.9.0
    DependsOn:
    - MyCustomResource
    Metadata:
      SamResourceId: ElasticServerlessForwarderEventMacro

  ElasticServerlessForwarderApplication:
    Type: AWS::Serverless::Application
    Properties:
      Location:
        ApplicationId: arn:aws:serverlessrepo:eu-central-1:267093732750:applications/helper-application-elastic-serverless-forwarder
        SemanticVersion: 1.9.0
      Parameters:
        ElasticServerlessForwarderS3ConfigFile: !Sub s3://${S3ConfigFileBucket}/config.yml
        ElasticServerlessForwarderSSMSecrets: !Ref ElasticSecret
        ElasticServerlessForwarderKMSKeys: !Sub
          - '${ElasticSQSKMSKey},${ElasticSSMSecretEncryptionKey}'
          - ElasticSQSKMSKey: !GetAtt ElasticSQSKMSKey.Arn
            ElasticSSMSecretEncryptionKey: !GetAtt ElasticSSMSecretEncryptionKey.Arn
        ElasticServerlessForwarderSQSEvents: ""   
        ElasticServerlessForwarderS3SQSEvents: !Sub
          - '${ElbSQSArn},${ElasticS3SQSArn},${VPCFlowLogsElasticSQSArn},${ElasticCloudTrailSQSArn}'
          - ElbSQSArn: !GetAtt ElbSQS.Arn
            ElasticS3SQSArn: !GetAtt ElasticS3SQS.Arn
            VPCFlowLogsElasticSQSArn: !GetAtt VPCFlowLogsElasticSQS.Arn
            ElasticCloudTrailSQSArn: !GetAtt ElasticCloudTrailSQS.Arn
        ElasticServerlessForwarderKinesisEvents: "" 
        ElasticServerlessForwarderCloudWatchLogsEvents: ""
        ElasticServerlessForwarderS3Buckets: !Sub
          - '${ElbCentralLoggingBucketArn},${S3AccessLoggingBucketArn},${VPCFlowLoggingBucketArn},${CloudTrailBucketArn}'
          - ElbCentralLoggingBucketArn: !GetAtt ElbCentralLoggingBucket.Arn
            S3AccessLoggingBucketArn: !GetAtt S3AccessLoggingBucket.Arn
            VPCFlowLoggingBucketArn: !GetAtt VPCFlowLoggingBucket.Arn
            CloudTrailBucketArn: !Ref CloudTrailBucketARN
        ElasticServerlessForwarderSecurityGroups: !If
            - ShouldDeployElasticForwarderInVPC
            - !GetAtt EndpointSecurityGroup.GroupId
            - ""  
        ElasticServerlessForwarderSubnets: !If
            - ShouldDeployElasticForwarderInVPC
            - Fn::Join: [',', !Ref SubnetIds]
            - ""  
    DependsOn: 
    - ElasticServerlessForwarderEventMacro
    Metadata:
      SamResourceId: ElasticServerlessForwarderApplication


  S3ConfigFileBucket:       #Bucket to store the config.yaml file
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub aws-config-bucket-${AWS::AccountId}-${AWS::Region}      
      VersioningConfiguration:
        Status: Enabled

  S3ConfigFileBucketPolicy:
    Type: AWS::S3::BucketPolicy
    DependsOn: S3ConfigFileBucket
    Properties:
      Bucket: !Ref S3ConfigFileBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AWSBucketPermissions
            Action: 
              - s3:PutObject
              - s3:GetObject
              - s3:DeleteObject
              - s3:GetBucketAcl
              - s3:ListBucket
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com 
            Resource:
              - Fn::Join:
                  - ''
                  - - 'arn:aws:s3:::'
                    - Ref: 'S3ConfigFileBucket'
                    - '/*'
              - Fn::Join:
                  - ''
                  - - 'arn:aws:s3:::'
                    - Ref: 'S3ConfigFileBucket'

  ElasticBootstrapLambdaForConfigFile:
    Type: 'AWS::Lambda::Function'
    DependsOn:
    - S3ConfigFileBucketPolicy
    Properties:
      FunctionName: !Sub Elastic-BootStrap-Lambda-${AWS::AccountId}-${AWS::Region}
      Handler: lambda_function.lambda_handler
      Role: !GetAtt ElasticBootstrapLambdaExecutionRole.Arn
      Runtime: python3.11
      Timeout: 300
      MemorySize: 128
      Code:
        S3Bucket: !Ref BootstrapLambdaConfigBucket
        S3Key: !Ref BootstrapLambdaConfigFilePath
      Environment:
        Variables:
          ELASTIC_SECRET_ARN: !Ref ElasticSecret
          SQS_QUEUE_ARN: !Sub
            - '${ElbSQSArn},${ElasticS3SQSArn},${VPCFlowLogsElasticSQSArn},${ElasticCloudTrailSQSArn}'
            - ElbSQSArn: !GetAtt ElbSQS.Arn
              ElasticS3SQSArn: !GetAtt ElasticS3SQS.Arn
              VPCFlowLogsElasticSQSArn: !GetAtt VPCFlowLogsElasticSQS.Arn
              ElasticCloudTrailSQSArn: !GetAtt ElasticCloudTrailSQS.Arn
          S3_BUCKET_NAME: !Ref S3ConfigFileBucket
          CloudTrail_S3_BUCKET_NAME: !Ref CloudTrailBucketName
          CloudTrail_SQS_QUEUE_ARN: !GetAtt ElasticCloudTrailSQS.Arn

  ElasticBootstrapLambdaExecutionRole: 
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Principal: 
              Service: 
              - "lambda.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'

  RolePolicies: 
    Type: 'AWS::IAM::Policy'
    Properties: 
      PolicyName: "ElasticBootstrapLambdaCustomPolicy"
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Action:
            - "s3:PutObject"
            - "s3:DeleteObject"
            - "lambda:InvokeFunction"
            - "cloudformation:SignalResource"
            - "cloudformation:DescribeStackResources"
            - "cloudformation:DescribeStackEvents"
            Resource: "*" 
      Roles: 
        - Ref: "ElasticBootstrapLambdaExecutionRole"

  MyCustomResource:
    Type: 'Custom::RunCode'
    DependsOn: ElasticBootstrapLambdaForConfigFile
    DeletionPolicy: Retain  # Add this line to specify the deletion policy
    Properties:
      ServiceToken: !GetAtt ElasticBootstrapLambdaForConfigFile.Arn
      
  ElasticSQSKMSKey:     # Create a KMS Key to encrypt the Queues
    Type: AWS::KMS::Key
    Properties:
      Description: Encrypt Elastic SQS queue messages
      Enabled: true
      EnableKeyRotation: true
      KeyUsage: ENCRYPT_DECRYPT
      PendingWindowInDays: 7
      KeyPolicy:
        Version: 2012-10-17
        Id: sqs-use
        Statement:
          - Sid: Key Admin Usage
            Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action: 
              - 'kms:*'
            Resource: '*'
          - Sid: s3-notifications
            Effect: Allow
            Principal:
              Service: s3.amazonaws.com
            Action:
              - 'kms:GenerateDataKey*'
              - 'kms:Decrypt'
            Resource: '*'
          - Sid: Elastic-Lambda-Permission
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - 'kms:GenerateDataKey*'
              - 'kms:Decrypt'
            Resource: '*'
          - Sid: access-conditions
            Effect: Allow
            Principal:
              AWS: '*'
            Action:
              - 'kms:GenerateDataKey*'
              - 'kms:Decrypt'
            Resource: '*'
            Condition:
              StringEquals:
                aws:PrincipalOrgID:
                  - !Ref AWSOrganizationID
          - Sid: Allow GuardDuty to encrypt findings
            Effect: Allow
            Principal:
              Service: guardduty.amazonaws.com
            Action:
              - 'kms:GenerateDataKey*'
            Resource: '*'

  ElasticSQSKMSKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: alias/ElasticSQSKMSKey
      TargetKeyId: !Ref ElasticSQSKMSKey
 
  ElasticSSMSecretEncryptionKey:     # Create a KMS Key to encrypt the Queues
    Type: AWS::KMS::Key
    Properties:
      Description: Encrypt the secrets stored in the SSM Store.
      Enabled: true
      EnableKeyRotation: true
      KeyUsage: ENCRYPT_DECRYPT
      PendingWindowInDays: 7
      KeyPolicy:
        Version: 2012-10-17
        Id: sqs-use
        Statement:
          - Sid: Key Admin Usage
            Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action: 
              - 'kms:*'
            Resource: '*'
          - Sid: Elastic-Lambda-Permission
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - 'kms:GenerateDataKey*'
              - 'kms:Decrypt'
            Resource: '*'

  ElasticSSMSecretKMSKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: alias/ElasticSSMSecretEncryptionKey
      TargetKeyId: !Ref ElasticSSMSecretEncryptionKey
      
  VPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Condition: ShouldDeployElasticForwarderInVPC
    Properties:
      SecurityGroupIds: 
        - !GetAtt EndpointSecurityGroup.GroupId
      ServiceName: 
        !FindInMap 
          - VPCServiceName
          - !Ref 'AWS::Region'
          - service
      SubnetIds: !Ref SubnetIds
      VpcEndpointType: Interface
      VpcId: !Ref VPCId
      
  EndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: ShouldDeployElasticForwarderInVPC
    Properties:
      GroupDescription: Elastic SecurityGroup 
      VpcId: !Ref VPCId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 9243
          ToPort: 9243
          CidrIp: 0.0.0.0/0
          
  PrivateHostedZone:
    Type: AWS::Route53::HostedZone
    Condition: ShouldDeployElasticForwarderInVPC
    Properties:
      Name:
        !FindInMap 
          - PrivateHostedZoneDNSName
          - !Ref 'AWS::Region'
          - HostedZone
      VPCs: 
        - 
          VPCId: !Ref VPCId
          VPCRegion: !Sub ${AWS::Region}        
          
  VPCEndpointCNAMERecord:
    Type: AWS::Route53::RecordSet
    Condition: ShouldDeployElasticForwarderInVPC
    Properties:
      HostedZoneId: !Ref PrivateHostedZone
      Name: 
        Fn::Sub: "*.vpce.${AWS::Region}.aws.elastic-cloud.com"
      Type: CNAME
      TTL: '60'
      ResourceRecords:
      - !Select
        - 1
        - !Split
          - ':'
          - !Select [0, !GetAtt VPCEndpoint.DnsEntries]
            




